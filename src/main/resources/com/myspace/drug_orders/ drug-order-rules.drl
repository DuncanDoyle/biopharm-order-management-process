package com.myspace.drug_orders;


import org.jbpm.casemgmt.api.CaseService;
import org.jbpm.services.api.service.ServiceRegistry;
import org.kie.api.runtime.process.CaseData;
import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;

import com.myspace.drug_orders.model.Drug;
import com.myspace.drug_orders.model.DrugStock;
import com.myspace.drug_orders.model.Order;

rule "Drugs not available"
when
    $caseData: CaseFileInstance()
    $drug: Drug() from $caseData.data["order"]#Order.drug
    DrugStock(skuNo == $drug.skuNo, inStock == false)
then
    System.out.println("Drugs not available!");
    CaseService caseService = (CaseService) ServiceRegistry.get().service(ServiceRegistry.CASE_SERVICE);
    caseService.triggerAdHocFragment($caseData.getCaseId(), "Drug Availability & Inventory", "Order new Drugs", null);
end

/*
rule "Drugs not fresh"
when
    $caseData: CaseData()
    $drug: Drug() from $caseData.order.drug
    DrugStock(skuNo == $drug.skuNo, expired == true)
then
    System.out.println("Drugs not fresh!");
    CaseService caseService = (CaseService) ServiceRegistry.get().service(ServiceRegistry.CASE_SERVICE);
    caseService.triggerAdHocFragment($caseData.getCaseId(), "Drug Availability & Inventory", "Order new Drugs", null);
end

rule "Drugs available"
when
    $caseData: CaseData()
    $drug: Drug() from $caseData.order.drug
    DrugStock(skuNo == $drug.skuNo, inStock == true, expired == false)
then
    System.out.println("Drugs available!");
    CaseService caseService = (CaseService) ServiceRegistry.get().service(ServiceRegistry.CASE_SERVICE);
    caseService.triggerAdHocFragment($caseData.getCaseId(), "Drug Availability & Inventory", "Reserver Order", null);
end
*/
